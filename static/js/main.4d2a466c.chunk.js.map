{"version":3,"sources":["Components/Header.js","Components/Settings/Settings.js","axios.js","Data/actions/api.js","Data/actions/actions.js","Components/Settings/index.js","Components/Players/Player.js","Components/Players/Player1.js","Components/Players/Player2.js","Components/Message/Message.js","Components/Message/index.js","Components/Reset/Reset.js","Components/Reset/index.js","Components/Games/Games.js","Components/Games/index.js","Components/GamePlay.js","Components/App/App.js","Components/App/index.js","Data/initial.js","Data/reducer.js","Data/store.js","index.js"],"names":["Header","className","Settings","props","state","player1Name","player2Name","winningScore","alternate","handlePlayer1NameChange","bind","handlePlayer2NameChange","handleWinScoreChange","handleSubmit","handleAlt","e","this","setState","currentTarget","value","preventDefault","handleSave","onSubmit","onChange","type","Component","axios","create","baseURL","params","headers","patchScore","player","dispatch","getState","patch","id","then","data","console","log","incrementScore","connect","post","player_1","player_2","winning_score","change_serve","name","save","postNewGame","Player","playerName","score","handleIncrement","winner","server","onClick","player1","player2","Message","Reset","handleReset","Games","games","length","scope","map","game","index","key","won","GamePlay","Player1","Player2","App","settings","Fragment","initial","minDiff","Math","abs","minScore","getWinner","reducer","action","logGames","total","floor","setServer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d2a466c.chunk.js","sourcesContent":["import React from \"react\";\n\nlet Header = () => (\n    <header className=\"page-header\">\n        <h1>PongPing</h1>\n    </header>\n);\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass Settings extends Component {\n  \n    constructor(props) {\n    super(props);\n    this.state = {\n        player1Name: props.player1Name,\n        player2Name: props.player2Name,\n        winningScore: props.winningScore,\n        alternate: props.alternate,\n    }\n    \n    this.handlePlayer1NameChange = this.handlePlayer1NameChange.bind(this);\n    this.handlePlayer2NameChange = this.handlePlayer2NameChange.bind(this);\n    this.handleWinScoreChange = this.handleWinScoreChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleAlt = this.handleAlt.bind(this);\n  }\n\n    handlePlayer1NameChange(e) {\n        this.setState({ player1Name: e.currentTarget.value });\n    }\n\n    handlePlayer2NameChange(e) {\n        this.setState({ player2Name: e.currentTarget.value });\n    }\n\n    handleWinScoreChange(e) {\n        this.setState({ winningScore: e.currentTarget.value });\n    }\n        \n    handleAlt(e) {\n        this.setState({ alternate: e.currentTarget.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.handleSave(this.state); \n    }\n    \n    \n    render() {\n        let { player1Name, player2Name, winningScore, alternate } = this.state;\n        return (\n            <form onSubmit={ this.handleSubmit }>\n                <div className=\"form-group\">\n                    <label>Player 1 Name</label>\n                    <input\n                    className=\"form-control\"\n                    onChange={ this.handlePlayer1NameChange }\n                    value={ player1Name }\n                    /> \n                </div>\n                <div className=\"form-group\">\n                    <label>Player 2 Name</label>\n                    <input\n                    className=\"form-control\"\n                    onChange={ this.handlePlayer2NameChange }\n                    value={ player2Name }\n                    /> \n                </div>\n                <div className=\"form-group\">\n                    <label>Winning Score</label>\n                    <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    onChange={ this.handleWinScoreChange }\n                    value={ winningScore }\n                    /> \n                </div>\n                <div className=\"form-group\">\n                    <label>Alternate Every</label>\n                    <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    onChange={ this.handleAlt }\n                    value={ alternate }\n                    /> \n                </div>\n                <button className=\"btn btn-primary\">Save</button>\n            </form>\n        ); \n    }\n}\n\nexport default Settings;","// import the library version of axios\nimport axios from \"axios\";\n// create a version of axios with useful defaults\nexport default axios.create({\n    // use your own url\n    baseURL: \"http://rowley.restful.training/api/ping-pong/games/\",\n    // use your own key\n    params: {\"key\": \"329b4a1603504df9b05cba4b9dbfe57c68e1946c\"},\n    // make sure we get JSON back\n    headers: {\"Accept\": \"application/json\"},\n});","import axios from \"../../axios\";\nimport { save } from './actions'\nimport { incrementScore } from './actions'\n\nexport const postNewGame = ( { player1Name, player2Name, winningScore, alternate} ) => {\n\treturn (dispatch) => {\n\t\taxios.post(\"/\", {\n            player_1: player1Name,\n            player_2: player2Name,\n            winning_score: winningScore,\n            change_serve: alternate,\n        }).then(({ data }) => { \n\t\t\t// returns a promise, need to use then method\n            dispatch(save(data.data))\n\t\t\t// now need to write a state action\n        })   \n\n\t}\n}\n\nexport const patchScore = player => (dispatch, getState) => {\n\t\taxios.patch(`${ getState().id }/score`, {\n            player: player,\n            \n        }).then(({ data }) => { \n\t\t\t// returns a promise, need to use then method\n            console.log(player)\n            dispatch(incrementScore(player))\n\t\t\t\n\t    })   \n}\n","// a change action creator\n// accepts an amount variable so we can change it easily\nexport const reset = () => {\n    return {\n      type: \"reset\",\n    }\n};\n  \nexport const incrementScore = ( player ) => {\n    return {\n    type: \"incrementScore\", \n    player: \"player\"+player ,\n   \n  }\n};\n\nexport const save = ({id, player_1, player_2, winning_score, change_serve}) => {\n    return {\n      type: \"save\",\n      id: id,\n      player1Name: player_1.name,\n      player2Name: player_2.name,\n      winningScore: +winning_score,\n      alternate: +change_serve,\n    };\n };\n\n","import { connect } from \"react-redux\";\nimport Settings from \"./Settings\";\nimport { postNewGame } from \"../../Data/actions/api\"\n\nconst mapStateToProps = state => {\n  return {\n    player1Name: state.player1Name,\n    player2Name: state.player2Name,\n    winningScore: state.winningScore,\n    alternate: state.alternate,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n      handleSave: value => {dispatch(postNewGame(value))},\n  }; \n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React from \"react\";\n\n\nlet Player = ( {playerName, score, handleIncrement, winner, server} ) => (\n    <div className=\"col-xs-6\">\n        <p>{ playerName } { server ? \n        <span className=\"pull-right label label-success\">Serving</span> : null }</p>\n        <p className=\"well\">{ score }</p>\n        { winner !== 0 ? null : \n        <button  onClick={ handleIncrement } className=\"btn btn-primary\">+</button>}\n    </div>\n);\n\nexport default Player; ","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Player from \"./Player\";\nimport { patchScore } from \"../../Data/actions/api\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = (state) => {\n    return {\n        playerName: state.player1Name, \n        score: state.player1,\n        winner: state.winner,\n        server: state.server === 0,   \n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        handleIncrement: () => dispatch(patchScore(1))\n    }\n};\n \nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","import { connect } from \"react-redux\"; // this wrapper allows us to interact with the store\nimport Player from \"./Player\"; // component we want to wrap\nimport { patchScore } from \"../../Data/actions/api\";\n\nlet mapStateToProps = state => {\n    return {\n        playerName: state.player2Name, \n        score: state.player2,\n        winner: state.winner,\n        server: state.server !== 0,   \n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        handleIncrement: () => dispatch(patchScore(2))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","\nimport React from 'react'\n\n\nlet Message = ( {winner, player} ) => (\n\n  winner === 0 ? null :\n      <h2 className=\"jumbotron\">{ player } wins!</h2> \n\n      )\n\n\nexport default Message;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Message from \"./Message\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = (state) => {\n    return {\n        winner: state.winner,\n        player: state.winner === 1 ? state.player1Name : state.player2Name,\n        \n    }\n};\n\nexport default connect(mapStateToProps)(Message);","\nimport React from 'react';\n\nlet Reset = ( {handleReset} ) => (\n    <>\n        <hr />\n        <button onClick={ handleReset } className=\"btn btn-danger\">Reset</button>\n    </>\n\n)\n\nexport default Reset;\n\n","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Reset from \"./Reset\";\nimport { reset } from \"../../Data/actions/actions\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        handleReset: () => dispatch(reset()),\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Reset);","import React from 'react'\n\nlet Games = ( {games} ) => games.length === 0 ? null :(\n  <>\n    <h2>Game History</h2> \n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Winner</th>\n          <th scope=\"col\">Winner'sScore</th>\n          <th scope=\"col\">Loser</th>\n          <th scope=\"col\">Loser's Score</th>\n        </tr>\n      </thead>\n      <tbody>\n      \n           { games.map((game, index) => (\n            <tr key={ index }>\n              <th>Game: { index + 1 }</th>\n              <th>{ game.player_1.won ? game.player_1.name : game.player_2.name }</th>\n              <th>{ game.player_1.won ? game.player_1.score : game.player_2.score }</th>\n              <th>{ !game.player_1.won ? game.player_1.name : game.player_2.name } </th> \n              <th>{ !game.player_1.won ? game.player_1.score : game.player_2.score }</th>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table> \n  </>   \n\n)\n\nexport default Games;","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport Games from \"./Games\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = (state) => {\n    return {\n        games: state.games,\n    \n    }\n};\n\nexport default connect(mapStateToProps)(Games);","import React from \"react\";\nimport Player1 from './Players/Player1';\nimport Player2 from './Players/Player2';\nimport Message from './Message/';\nimport Reset from './Reset/';\nimport Games from './Games/';\n\nlet GamePlay = () => (\n    <>\n        <div className=\"row\">\n            <Player1 />\n            <Player2 />\n        </div>\n        <Message />\n        <Reset/>\n        <Games />\n    </>\n)\n\nexport default GamePlay;","import React from \"react\";\nimport Header from '../Header';\nimport Settings from '../Settings';\nimport GamePlay from '../GamePlay';\n\n\nconst App = ( {settings} ) => (\n    <React.Fragment>\n        <Header />\n        { settings ? <GamePlay /> : <Settings /> } \n    </React.Fragment>\n);\n\nexport default App;\n ","import { connect } from \"react-redux\"; // this allows us to interact with the store\nimport App from \"./App\";\n\n// mapStateToProps: maps the current state (from the store)\n// to the props that get passed into the wrapped component\n// needs to return an object literal which gets merged in\n// to any other props being passed in\nlet mapStateToProps = (state) => {\n    return {\n        settings: state.settings,\n        \n    }\n};\n\nexport default connect(mapStateToProps)(App);","//initial state\nconst initial = {\n    player1: 0,\n    player2: 0,\n    server: 0,\n    winner: 0,\n    games: [],\n    player1Name: \"\",\n    player2Name: \"\",\n    winningScore: 21,\n    alternate: 5,\n    settings: false,\n    id: 0,\n};\n\nexport default initial;","import initial from'./initial';\n\nconst incrementScore= (state, player) => {\n    return { ...state, [player]: state[player] + 1, }\n}\n\nconst setServer = state => {\n    let total = state.player1 + state.player2;\n    let alternate = minScore(state) ? 2 : state.alternate\n    return {\n         ...state, \n         server:Math.floor(total / alternate) % 2 }\n};\n\nlet minDiff = state => Math.abs(state.player1 - state.player2) >= 2;\nlet minScore = state =>state.player1 >=state.winningScore || state.player2 >=state.winningScore;\nlet getWinner = state =>state.player1 > state.player2 ? 1 : 2;\n\nconst winner = state => ({\n         ...state,\n        winner: minDiff(state) && minScore(state) ? getWinner(state) : 0 });\n\nconst logGames = state => {\n    let games = state.games;\n    if (state.winner === 0 ) {\n        return state;\n    } else {\n        return {\n            ...state,\n            games: [...games, {\n                    player_1: { \n                        name: state.player1Name,\n                        score : state.player1,\n                        won :  state.player1 > state.player2,  \n                    },\n                    player_2: {\n                        name: state.player2Name, \n                        score : state.player2,\n                        won : state.player2 > state.player1,\n                    }\n                }]  \n            } \n        }\n};\n\nconst save = (state, { id, player1Name, player2Name, winningScore, alternate }) => \n        ({ ...state,\n            id: id,\n            player1Name: player1Name,\n            player2Name: player2Name,\n            winningScore: +winningScore,\n            alternate: +alternate,\n            settings: true,\n        });\n\nconst reducer = (state, action) => {\n   switch (action.type) {\n    // using object spread to create a new object\n     case \"incrementScore\": return logGames(winner(setServer(incrementScore(state, action.player)))) \n     case \"reset\": return {...initial, games: state.games};\n     case \"save\": return save(state, action)\n     default: return state;\n    } \n};\n\nexport default reducer;","import reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers =\nwindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; \n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport store from'./Data/store';\nimport { Provider } from \"react-redux\";\n\n\n// subscribe to any changes\n\nReactDOM.render( // completely recontructs the app component\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root') // attaches it all to the index.html\n);\n"],"sourceRoot":""}